version: "3.9"

services:
  database:
    image: postgres:14.1-alpine
    container_name: dvh-store-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -d ${DATABASE_NAME} -U ${DATABASE_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "${DATABASE_PORT}:5432"
    networks:
      - store-network
    volumes:
      - db:/var/lib/postgresql/data

  server:
    build:
      context: ../server
      dockerfile: ../dev-config/Dockerfile.server
    container_name: dvh-store-server
    depends_on:
      - database
    ports:
      - "${SERVER_PORT}:1337"
    volumes:
      - ../server:/usr/app
      - /usr/app/node_modules
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - store-network

  # client:
  #   build:
  #     context: ../client
  #     dockerfile: ../dev-config/Dockerfile.client
  #   container_name: dvh-store-client
  #   depends_on:
  #     - database
  #     - server
  #   ports:
  #     - "${CLIENT_PORT}:3000"
  #   volumes:
  #     - ../client:/usr/app
  #     - /usr/app/node_modules
  #   environment:
  #     CLIENT_PORT: ${CLIENT_PORT}
  #     BASE_BACKEND_URL: ${BASE_BACKEND_URL}
  #     REVALIDATE_TIME: ${REVALIDATE_TIME}
  #   networks:
  #     - store-network

networks:
  store-network:

volumes:
  db:
